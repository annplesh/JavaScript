// 1. Напиши функцию`safeDivide`, которая принимает два числа и возвращает результат их деления.
// Если второй аргумент равен нулю, функция должна бросать ошибку с сообщением "Деление на ноль невозможно".
// Используй `try...catch` для обработки ошибок и выведи сообщение об ошибке в консоль;

function safeDivide(a, b) { // Объявляем функцию safeDivide, которая принимает два аргумента: a — делимое, b — делитель.
    try { // !начало блока try, где мы помещаем код, который может вызвать ошибку.

        if (b === 0) { // Проверка: если делитель равен нулю
            throw new Error('Деление на ноль невозможно'); // то выбрасываем ошибку с сообщением.
            // !throw new Error прерывает выполнение и передаёт управление в catch
        }
        const result = a / b; // Если делитель не равен нулю, выполняем деление и сохраняем результат в переменную result.
        console.log('Результат деления:', result); 
        return result; // Возвращаем результат из функции.
        // Это важно, чтобы можно было использовать результат дальше 
        // — например, сохранить его в переменную или передать другой функции.

    } catch (error) { // Если в блоке try произошла ошибка, управление переходит сюда. error — объект ошибки.
        console.error('Ошибка:', error.message);
    }
}

safeDivide(10, 2); // 5
safeDivide(8, 0);  // Ошибка: Деление на ноль невозможно

// 2. Напиши функцию`transfromJSON`, которая принимает строку в формате JSON и возвращает объект.
// Используй `try...catch` для обработки возможных ошибок при парсинге JSON и выведи сообщение об ошибке в консоль;

function transformJSON(jsonString) { // Объявляется функция transformJSON, которая принимает один аргумент — jsonString, строку в формате JSON.
    try { // !начало блока try, где мы помещаем код, который может вызвать ошибку.
        const parsedObject = JSON.parse(jsonString); // Пытаемся преобразовать строку jsonString в объект с помощью JSON.parse.
        //Если строка валидная, создаётся объект parsedObject.
        // JSON.parse(jsonString) встроенная функция JavaScript, которая преобразует строку в формате JSON в обычный объект.
        console.log('Успешно преобразовано:', parsedObject); // Если парсинг прошёл успешно, выводим сообщение и сам объект в консоль
        return parsedObject; // Возвращаем полученный объект из функции — это позволяет использовать его дальше в коде.
    } catch (error) { // !Если JSON.parse вызовет ошибку , управление перейдёт в catch.
    // error — объект ошибки, содержащий информацию о том, что пошло не так.
        console.error('Ошибка при парсинге JSON:', error.message);
    }
}

transformJSON('{"name": "Anna", "age": 40}');
// Успешно преобразовано: { name: "Anna", age: 40 }

transformJSON('{name: "Anna", age: 40}');
// Ошибка при парсинге JSON: Expected property name or '}' in JSON at position 1 (line 1 column 2)
// Строка — невалидный JSON, потому что ключи (name, age) не заключены в двойные кавычки.

// 3. Напиши функцию `checkAccess`, которая принимает возраст пользователя. 
// Если возраст меньше 18, функция должна бросать ошибку с сообщением "Доступ запрещен". 
// Используйте `try...catch` для обработки ошибок и выведи сообщение об ошибке в консоль.

function checkAccess(age) { // Объявляем функцию checkAccess, которая принимает один аргумент — age 
    try { // !начало блока try, где мы помещаем код, который может вызвать ошибку.
        if (age < 18) { // если возраст меньше 18 лет
            throw new Error('Доступ запрещен');// то выбрасывается ошибка с сообщением 'Доступ запрещен'.
            // !throw new Error() прервает выполнение и передает управление в catch.

        }
        console.log('Доступ разрешен'); //  Если возраст 18 или больше, выводим сообщение: 'Доступ разрешен'
    } catch (error) { // Если в блоке try произошла ошибка, выполнение переходит в catch.
        // error — объект, содержащий информацию об ошибке.
        console.error('Ошибка:', error.message);
    }
}

checkAccess(16); // Ошибка: Доступ запрещен
checkAccess(21); // Доступ разрешен