// 1. –ï—Å—Ç—å –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª.–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –º–∞—Å—Å–∏–≤ —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–∞–º –±—ã–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª.–ü—Ä–∏–º–µ—Ä: [2, 3] -> [4, 9];

const numbersArray = [2, 3, 4, 5, 6];
const squaresArray = numbersArray.map(num => num * num);

console.log(squaresArray);

/*
2. –ï—Å—Ç—å –º–∞—Å—Å–∏–≤ c –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π –º–∞—Å—Å–∏–≤ —Ç–∞–∫, 
—á—Ç–æ–±—ã —Ç–∞–º –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.–ü—Ä–∏–º–µ—Ä: [1, 2, 2, 3, 4, 5, 5, 5, 6] -> [1, 2, 3, 4, 5, 6];
*/

const array = [1, 2, 2, 3, 4, 5, 5, 5, 6];

const unique = array.filter((num, index) => {
    return array.indexOf(num) === index;
});

// filter –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ—Ç return (true –∏–ª–∏ false)

// array.filter((num, index) => filter - —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–∏–≤–∞, num - —ç–ª–µ–º–µ–Ω—Ç, index - –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞

/*
return array.indexOf(num) === index; 

–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç num –ø–µ—Ä–≤—ã–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ–º —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤?"

- –ï—Å–ª–∏ –¥–∞ ‚Üí —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ ‚Üí true ‚Üí —ç–ª–µ–º–µ–Ω—Ç –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
- –ï—Å–ª–∏ –Ω–µ—Ç ‚Üí —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä ‚Üí false ‚Üí —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è.
*/

console.log(unique);

// 3. –ï—Å—Ç—å –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª, –ø–æ—Å—á–∏—Ç–∞–π —Å—É–º–º—É –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: [1, 2, 3] -> 6. –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π reduce;

const numbers = [1, 2, 3];
const sum = numbers.reduce((total, num) => total + num, 0);

// total = 0; num = 1; 0 + 1;
// total = 1; num = 2; 1 + 2;
// total = 2; num = 3; 3 +3;

console.log(`–°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–≤–Ω–∞ ${sum}`);

/*
4. –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–≤–µ—Ä–Ω–µ—Ç –º–∞—Å—Å–∏–≤, —Ç–æ –µ—Å—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. 
–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reverse()!
*/

const arr = [1, 2, 3, 4, 5];

const reversedArr = arr.reduceRight((acc, value) => {
    acc.push(value);
    return acc;
}, []);

console.log(reversedArr);

/*
arr.reduceRight() - –ú–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ (–æ—Ç 5 –∫ 1).
- –û–Ω –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. 

- acc ‚Äî –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä, –≤ –Ω–∞—á–∞–ª–µ —ç—Ç–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []
- value ‚Äî —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (5)
- acc.push(value) ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞
- return acc ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
- [] - –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ ‚Äî –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
*/

/*
5. –°–æ–∑–¥–∞–π –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö - –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º let –∏ const. 
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. 
–°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º let –∏ const. 
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤—ã (–¥–æ–±–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã) –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∞–º–∏ –º–∞—Å—Å–∏–≤—ã. 
–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (–¥–∞, –æ–ø—è—Ç—åüôÇ), —á—Ç–æ –∏ –ø–æ—á–µ–º—É —Ç–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–æ.
*/
let strLet = "–ü—Ä–∏–≤–µ—Ç";
const strConst = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π";

strLet = "Hola"; // —Ä–∞–±–æ—Ç–∞–µ—Ç! –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é let –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
console.log(strLet);

/*
strConst = "Hello";
console.log(strConst);
–æ—à–∏–±–∫–∞! –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é const –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
*/

let fruitsLet = ['Apple', 'Banana'];
const fruitsConst = ['Mango', 'Papaya'];

// –ú—É—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:
fruitsLet.push('Kiwi');      
console.log(fruitsLet);        // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ['Apple', 'Banana', 'Kiwi']; 

fruitsConst.push('Orange');
console.log(fruitsConst);      // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ['Mango', 'Papaya','Orange'];

fruitsLet.pop();
console.log(fruitsLet);        // ‚úÖ –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ['Apple', 'Banana'];

fruitsConst.shift();           
console.log(fruitsConst);      // ‚úÖ –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ['Papaya', 'Orange']

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –º–∞—Å—Å–∏–≤—ã:
fruitsLet = ['Strawberry', 'Orange', 'Kiwi']; 
console.log(fruitsLet); // ‚úÖ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è ['Strawberry', 'Orange', 'Kiwi'];

/*
fruitsConst = ['Grapes', 'Mango', 'Banana'];
console.log(fruitsConst); ‚ùå –æ—à–∏–±–∫–∞: Assignment to constant variable

–ò—Ç–æ–≥:
–ü–µ—Ä–µ–º–µ–Ω–Ω—É—é const –≤ –º–∞—Å—Å–∏–≤–∞—Ö –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å, –Ω–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å (–º—É—Ç–∏—Ä–æ–≤–∞—Ç—å) —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–∞

–ü–µ—Ä–µ–º–µ–Ω–Ω—É—é let –º–æ–∂–Ω–æ –∏ –∏–∑–º–µ–Ω–∏—Ç—å, –∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å
*/

/*
–ú—É—Ç–∞–±–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
const fruits = ['Apple', 'Banana', 'Strawberry'];

const removedLastElement = fruits.pop(); // pop - —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
console.log(fruits); // [ 'Apple', 'Banana' ]

const newFirstElement = fruits.unshift('Mango'); // unshift - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
console.log(fruits); // [ 'Mango', 'Apple', 'Banana' ]

const removedFirstElement = fruits.shift(); // shift - —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
console.log(fruits); // [ 'Apple', 'Banana' ]

const removedFruit = fruits.splice(1, 1, 'Grapes', 'Papaya'); // splice(start, deleteCount, item1, item2, ..., itemN);
console.log(fruits); // [ 'Apple', 'Grapes', 'Papaya' ]
—É–¥–∞–ª–∏–ª—Å—è –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º 1 –∏ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –¥–≤–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
console.log(removedFruit); // [ 'Banana' ]

const partialFilledFruits = fruits.fill('Orange', 1, 2)
console.log(fruits); // [ 'Apple', 'Orange', 'Papaya' ]
fill - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ start –∏ –¥–æ (–Ω–µ –≤–∫–ª—é—á–∞—è) –∏–Ω–¥–µ–∫—Å–∞ end —Ç.–µ. 'Grapes' –∑–∞–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ 'Orange'

–ò–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

const fruits = ['Cherry', 'Plum', 'Whatermelon'];
const index = fruits.indexOf('Whatermelon');

console.log(`–ú–∞—Å—Å–∏–≤: ${fruits.join(', ')}`); // –ú–∞—Å—Å–∏–≤: Cherry, Plum, Whatermelon
console.log(`'Whatermelon' –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${index}`);

const isCherryIncluded = fruits.includes('Cherry'); 
console.log(isCherryIncluded); // true

const moreFruits = fruits.concat(['Orange', 'Lemon', 'Peach']);
console.log(moreFruits); // [ 'Cherry', 'Plum', 'Whatermelon', 'Orange', 'Lemon', 'Peach' ]

const onlyTwoFirst = moreFruits.slice(0, 2);
console.log(onlyTwoFirst); // [ 'Cherry', 'Plum' ]

const iteratedFruits = fruits.forEach((fruit, index) => {
    console.log(`${index}: ${fruit}`);
}); 

const foundFruit = fruits.find(fruit => fruit.startsWith('W'));
console.log(foundFruit); // foundFruit = 'Whatermelon' (–ø–µ—Ä–≤—ã–π —Ñ—Ä—É–∫—Ç, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è –Ω–∞ 'W')

const allStartWithA = fruits.every(fruit => fruit.startsWith('A'));
console.log(allStartWithA); // false - –Ω–µ –≤—Å–µ —Ñ—Ä—É–∫—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'A'

const hasBanana = fruits.some(fruit => fruit === 'Banana');
console.log(hasBanana); // false - –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç 'Banana'
*/rays