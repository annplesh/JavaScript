// 1. Напиши функцию, которая создает локальную переменную и выводит её значение. 
// Попробуй получить доступ к этой переменной вне функции и объясни, что произошло;

function showLocalVariable() {
    const localMessage = "I'm local";
    console.log(localMessage); // работает, потому что вызывается внутри той же области видимости.
}

showLocalVariable(); // "I'm local"

// переменная не доступна ВНЕ функции
//console.log(localMessage); // ReferenceError: localVariable is not defined - localVariable
// !ошибка возникает из-за лексической области видимости

// Локальные переменные живут только внутри своей функции.
// Они недоступны снаружи, потому что JavaScript использует лексическую область видимости
// — переменные видны только там, где они были объявлены.

// 2. Создай блок с условием и объяви переменную внутри него. 
// Попробуй получить доступ к этой переменной вне блока и объясни результат;

const isVisible = true;
if (isVisible) {
    // объявялем переменную ВНУТРИ блока, то есть в блочной области видимости
    const blockVariable = "I'm inside a block";
    console.log(blockVariable); // "I'm inside a block"
}

// !переменная не доступна ВНЕ блока
// console.log(blockVariable); // ReferenceError: blockVariable is not defined - blockVar не определена

// Переменные, объявленные с помощью const (или let), имеют блочную область видимости.
// Это значит, что они существуют только внутри фигурных скобок {}
// — например, внутри if, for, while, или функции.
// Когда выполнение выходит за пределы блока if,
// переменная blockVariable больше не существует, и попытка её использовать вызывает ошибку.

// 3. Изучи, что такое hoisting в JavaScript и расскажи своими словами,
// что это такое и какие проблемы с ним связаны. Приведи примеры :)

// !Hoisting (подъём) — это механизм, при котором объявления переменных и функций
// !перемещаются вверх области видимости до выполнения кода,
// !но без переноса их значений.

// Это работает по-разному для var, let, const и функций

// Функции
sayHi(); // "Hi!" //  Работает, потому что объявление и тело функции полностью поднимаются.

function sayHi() {
    console.log("Hi!");
}

// Функции обявленные как выражения
// greet(); // ReferenceError - // !Ошибка т.к. функции обявленные как выражения 
// !не поднимаются как обычные function
/*
const greet = function () {
    console.log("Hello!");
};
*/
// Переменные с var
// console.log(name);  // undefined
// var name = "Anna";
// !var — Объявление поднимается, но значение присваивается позже → undefined

// Переменные с let и const
// console.log(age); // ReferenceError
// let age = 30;
// !Переменная находится в TDZ (Temporal Dead Zone)
// !— доступ к ней невозможен до инициализации.

// !Проблемы, связанные с hoisting:
// Непредсказуемое поведение(undefined вместо ожидаемого значения)
// Ошибки доступа(ReferenceError)
// Сложность отладки в больших функциях
// Переопределение переменных без предупреждения

// !Как избежать проблем?
// Использовать let и const вместо var
// Всегда объявлять переменные в начале блока, где они используются
// Не вызывать функции до их объявления(при использовании выражений или стрелочных функций)